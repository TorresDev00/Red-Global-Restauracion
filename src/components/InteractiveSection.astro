---
interface Props {
  imageUrl: string;
}

const { imageUrl } = Astro.props;
---

<section id="sectionContainer" class="relative bg-cover bg-center rounded-2xl shadow-lg h-[90vh] w-full max-w-4xl container flex items-center justify-center transition-bg" style={`background-image: url('${imageUrl}');`} aria-live="polite">
  <button id="toggleButton" class="absolute bottom-4 right-4 p-3 border-2 border-black text-black hover:bg-black hover:text-white dark:border-white  dark:text-white dark:hover:bg-white dark:hover:text-blue-950 rounded-full transition duration-300 me-2 z-50" aria-label="Mostrar información adicional">
    <svg id="toggleIcon" xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 transition-transform duration-500" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
    </svg>
  </button>
  <div id="infoDivs" class="absolute inset-0 backdrop-blur-sm w-full h-full flex flex-col md:flex-row gap-6 md:gap-8 justify-around items-center opacity-0 transform translate-y-4 transition-all duration-500 ease-in-out invisible overflow-y-auto py-8" aria-hidden="true">
    <article data-aos="fade-up" class="bg-transparent py-12 px-4 rounded-lg w-11/12 md:w-1/3 flex flex-col items-center">
      <svg class="h-12 w-12 text-blue-500 mb-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
      </svg>
      <h2 class="text-xl font-bold mb-2 text-dark dark:text-white">Información 1</h2>
      <p class="text-center text-dark dark:text-white">Detalles adicionales sobre la información 1.</p>
    </article>
    <article data-aos="fade-up" data-aos-delay="100" class="bg-transparent py-12 px-4 rounded-lg w-11/12 md:w-1/3 flex flex-col items-center">
      <svg class="h-12 w-12 text-green-500 mb-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
      </svg>
      <h2 class="text-xl font-bold mb-2 text-dark dark:text-white">Información 2</h2>
      <p class="text-center text-dark dark:text-white">Detalles adicionales sobre la información 2.</p>
    </article>
    <article data-aos="fade-up" data-aos-delay="200" class="bg-transparent py-12 px-4 rounded-lg w-11/12 md:w-1/3 flex flex-col items-center">
      <svg class="h-12 w-12 text-red-500 mb-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
      </svg>
      <h2 class="text-xl font-bold mb-2 text-dark dark:text-white">Información 3</h2>
      <p class="text-center text-dark dark:text-white">Detalles adicionales sobre la información 3.</p>
    </article>
  </div>
</section>

<script>
  import AOS from 'aos';
  import 'aos/dist/aos.css';

  function initAOS() {
    AOS.init({
      duration: 1000,
      once: false,
    });
  }

  // Inicializar AOS en la carga inicial
  initAOS();

  // Reinicializar AOS después de las transiciones de vista
  document.addEventListener('astro:after-swap', initAOS);

  const toggleButton = document.getElementById('toggleButton');
  const toggleIcon = document.getElementById('toggleIcon');
  const infoDivs = document.getElementById('infoDivs');
  const mainContainer = document.getElementById('sectionContainer');
  let isOpen = false;

  toggleButton.addEventListener('click', () => {
    if (isOpen) {
      infoDivs.classList.add('opacity-0', 'translate-y-4');
      infoDivs.setAttribute('aria-hidden', 'true');
      setTimeout(() => {
        infoDivs.classList.add('invisible');
        mainContainer.style.backgroundImage = `url('${mainContainer.dataset.imageUrl}')`;
        mainContainer.style.backgroundColor = "transparent";
      }, 500);
      toggleIcon.classList.remove('rotate-45');
      toggleIcon.classList.add('rotate-0');
      toggleButton.setAttribute('aria-label', 'Mostrar información adicional');
    } else {
      infoDivs.classList.remove('invisible');
      infoDivs.setAttribute('aria-hidden', 'false');
      setTimeout(() => {
        infoDivs.classList.remove('opacity-0', 'translate-y-4');
      }, 50);
      mainContainer.style.backgroundImage = "none";
      mainContainer.style.backgroundColor = "transparent";
      toggleIcon.classList.add('rotate-45');
      toggleIcon.classList.remove('rotate-0');
      toggleButton.setAttribute('aria-label', 'Ocultar información adicional');
    }
    isOpen = !isOpen;
    AOS.refresh();
  });

  toggleButton.addEventListener('keydown', (event) => {
    if (event.key === 'Enter' || event.key === ' ') {
      event.preventDefault();
      toggleButton.click();
    }
  });

  mainContainer.dataset.imageUrl = mainContainer.style.backgroundImage.slice(5, -2);
</script>

<style>
  .rotate-45 { transform: rotate(45deg); }
  .rotate-0 { transform: rotate(0deg); }
  .transition-bg { transition: background-color 0.5s ease-in-out, background-image 0.5s ease-in-out; }
  .transition-all { transition: all 0.5s ease-in-out; }
</style>