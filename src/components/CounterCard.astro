--- 
export interface Props {
  dataCount: string;
  title: string;
}

const { dataCount, title } = Astro.props;
---

<div class="w-full sm:w-1/2 lg:w-1/4 px-4 mb-8">
  <div class="counter-card text-center p-6">
    <div class="icon-container mb-4">
      <slot />
    </div>
    <div class="text-4xl font-bold text-black dark:text-white transition-colors duration-500 gradient-text mb-2" data-count={dataCount}>0</div>
    <div class="gradient-text-container">
      <span class="text-2xl font-medium text-black dark:text-white transition-colors duration-500 gradient-text">{title}</span>
    </div>
  </div>
</div>

<style>
  @keyframes gradientFlowOnce {
    0% {
      background-position: 200% 50%;
    }
    100% {
      background-position: 0% 50%;
    }
  }

  /* Clase que inicia la animación después de 1 segundo */
  .gradient-text.animate {
    background-image: linear-gradient(90deg, #3b82f6, #d75cf6, #ec4899, #3b82f6);
    background-size: 200% auto;
    -webkit-background-clip: text;
    background-clip: text;
    color: transparent; /* Cambia a transparente para mostrar el gradiente */
    animation: gradientFlowOnce 2s ease forwards; /* Se anima una sola vez */
  }

  .icon-container {
    display: flex;
    justify-content: center;
    align-items: center;
  }
</style>

<script>
  function animateCounter(element, target, duration) {
    let start = 0;
    const increment = target / (duration / 16);
    const timer = setInterval(() => {
      start += increment;
      element.textContent = Math.floor(start).toLocaleString();
      if (start >= target) {
        element.textContent = target.toLocaleString();
        clearInterval(timer);
      }
    }, 16);
  }

  function setupObserver() {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const counterElement = entry.target.querySelector('[data-count]');
          const gradientElements = entry.target.querySelectorAll('.gradient-text');
          
          // Anima los contadores
          animateCounter(counterElement, parseInt(counterElement.getAttribute('data-count')), 2000);

          // Retraso de 1 segundo antes de aplicar la animación de gradiente
          setTimeout(() => {
            gradientElements.forEach(el => el.classList.add('animate'));
          }, 1000);  // Retraso de 1 segundo antes de colorear

          observer.unobserve(entry.target); // Detenemos la observación una vez que se activa
        }
      });
    }, { threshold: 0.5 });

    document.querySelectorAll('.counter-card').forEach(el => observer.observe(el));
  }

  document.addEventListener('DOMContentLoaded', setupObserver);
</script>